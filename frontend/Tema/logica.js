/*
  ======================================================
  ARQUIVO DE L√ìGICA DO TEMA (tema/theme.js)
  ======================================================
  Este script controla a troca entre o tema claro e escuro
  e salva a prefer√™ncia do usu√°rio no navegador.
*/

// Garante que o DOM esteja completamente carregado antes de executar o script.
document.addEventListener('DOMContentLoaded', () => {
    const themeToggleBtn = document.getElementById('theme-toggle-btn');
    const body = document.body;

    // Se o bot√£o de tema n√£o existir na p√°gina atual, o script n√£o faz mais nada.
    if (!themeToggleBtn) {
        return;
    }

    // 1. VERIFICAR TEMA SALVO AO CARREGAR A P√ÅGINA
    // Pega o tema salvo no localStorage do navegador.
    const currentTheme = localStorage.getItem('theme');

    // Se o tema salvo for 'dark', aplica a classe e atualiza o √≠cone.
    if (currentTheme === 'dark') {
        body.classList.add('dark-mode');
        themeToggleBtn.innerHTML = '‚òÄÔ∏è'; // √çcone de sol
    } else {
        themeToggleBtn.innerHTML = 'üåô'; // √çcone de lua
    }

    // 2. ADICIONAR EVENTO DE CLIQUE AO BOT√ÉO
    themeToggleBtn.addEventListener('click', () => {
        // Adiciona ou remove a classe 'dark-mode' do body.
        body.classList.toggle('dark-mode');

        let theme = 'light'; // Por padr√£o, o tema a ser salvo √© 'light'.
        
        // Verifica se o body AGORA TEM a classe 'dark-mode'.
        if (body.classList.contains('dark-mode')) {
            theme = 'dark'; // Se tiver, o tema a ser salvo √© 'dark'.
            themeToggleBtn.innerHTML = '‚òÄÔ∏è'; // Atualiza o √≠cone para sol.
        } else {
            themeToggleBtn.innerHTML = 'üåô'; // Sen√£o, atualiza para lua.
        }
        
        // Salva a prefer√™ncia ('light' ou 'dark') no localStorage.
        localStorage.setItem('theme', theme);
    });
});